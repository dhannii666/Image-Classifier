import tensorflow as tf
mnist=tf.keras.datasets.fashion_mnist
(training_images,training_labels),(test_images,test_labels)=mnist.load_data()


class mycallback(tf.keras.callbacks.Callback):
  def i(self, epoch, logs={}):
    if(logs.get('acc')>0.85):
      print("\n Reached accuracy 85% so cancelling Trainng")
      self.model.stop_training=True
callbacks=mycallback()


import matplotlib.pyplot as plt
#plt.imshow(training_images[5902])

#print(training_images.shape)
#print(training_labels.shape)
#print(test_labels[899])
#print(len(training_labels))
plt.imshow(test_images[0])
print(training_labels[0])

unique_labels=set()
for labels in training_labels:
  unique_labels.add(labels)
print(len(unique_labels))  

training_images=training_images/255
test_images=test_images/255

model=tf.keras.models.Sequential([tf.keras.layers.Flatten(),tf.keras.layers.Dense(128,activation=tf.nn.relu),tf.keras.layers.Dense(10,activation=tf.nn.softmax)])


model.compile(optimizer=tf.train.AdamOptimizer(),loss='sparse_categorical_crossentropy',metrics=['accuracy'])
model.fit(training_images,training_labels,epochs=5,callbacks=[callbacks])


model.evaluate(test_images,test_labels)

classifications = model.predict(test_images)
print(classifications[0])

print(test_labels[0])
if test_labels[0]==9:
  print(f"Predicted label is {test_labels[0]}, the image associated with label  {test_labels[0]} is a 'shoe'")
else:
  print("not a shoe")  
